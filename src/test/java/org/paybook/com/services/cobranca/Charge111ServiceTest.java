package org.paybook.com.services.cobranca;

import io.quarkus.test.junit.QuarkusTest;
import io.quarkus.test.junit.mockito.InjectMock;
import io.smallrye.mutiny.helpers.test.UniAssertSubscriber;
import org.junit.jupiter.api.Test;
import org.paybook.com.EnumChargeType;
import org.paybook.com.db.BatchWriter;
import org.paybook.com.services.ChargesCollection;
import org.paybook.com.services.Destinatario;
import org.paybook.com.services.cobranca.dao.Charge111Model;
import org.paybook.com.services.link_pagamento.LinkPagamentoFactory;
import org.paybook.com.services.link_pagamento.dao.LinkPagamentoModel;
import org.paybook.com.services.link_pagamento.dao.LinkPagamentoPreviewModel;

import javax.inject.Inject;
import java.time.Instant;
import java.time.temporal.ChronoUnit;

@QuarkusTest
class Charge111ServiceTest {

    @Inject
    Charge111Service chargeService;

//    @InjectMock
//    ChargeRepository chargeRepository;

    @InjectMock
    BatchWriter batch;

    static final String CHARGE_ID = "47520016904330182046";

    final Charge111Model charge111Model = new Charge111Model.Builder()
            .documentID(CHARGE_ID)
            .chargeType(
                    EnumChargeType.C_111)
            .receiver(new Destinatario("sr.strass@gmail.com", "fernando", "999467985"))
            .creationDate(Instant.now())
            .expirationDate(Instant.now().plus(10, ChronoUnit.DAYS))
            .status(EnumChargeStatus.CHARGE_OPEN)
            .amount(10000)
            .build();

    @Test
    void generatePaymentLinks() {
        ChargesCollection chargesCollection = ChargesCollection.of("9lSbTlfCh3UawuxgGS63F9zNAJw2",
                "FMF92AK0AA7WNMLFV5Ol");

        UniAssertSubscriber<Charge111Model> subscriber = this.chargeService.generatePaymentLinks(
                        this.charge111Model, chargesCollection)
                .subscribe()
                .withSubscriber(UniAssertSubscriber.create());

        Charge111Model chargeReceived = subscriber.assertCompleted().getItem();
//        System.out.println(chargeReceived);

        // build expected objects

        LinkPagamentoModel expectedPaymentLink = new LinkPagamentoModel.Builder().from(
                        LinkPagamentoFactory.from(this.charge111Model.amount(),
                                this.charge111Model.expirationDate(),
                                this.charge111Model.documentID(), "descricao"))
                // use the same ID generated by chargeReceiver to make the assert correctly
                .documentID(chargeReceived.paymentLinks().get(0).getId())
                .build();

        LinkPagamentoPreviewModel expectedPaymentLinkPreview = LinkPagamentoPreviewModel.from(expectedPaymentLink);

        Charge111Model expectedCharge = new Charge111Model.Builder().from(this.charge111Model)
                .status(EnumChargeStatus.WAITING_PAYMENT)
                .addPaymentLinks(expectedPaymentLinkPreview)
                .build();

        subscriber.assertCompleted().assertItem(expectedCharge);
    }
}